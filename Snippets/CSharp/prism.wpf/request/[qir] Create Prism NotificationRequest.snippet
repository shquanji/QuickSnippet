<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Create Prism NotificationRequest</Title>
      <Author>上海全迹</Author>
      <Description>创建通知交互请求</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>qir</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>Notification</ID>
          <ToolTip>
          </ToolTip>
          <Default>Notification</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>notification</ID>
          <ToolTip>
          </ToolTip>
          <Default>notification</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>打开窗口</ID>
          <ToolTip>
          </ToolTip>
          <Default>打开窗口</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[//交互请求定义  ---  前台代码  --   阅读后请删除该注释

//定义
// xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
// xmlns:prism="http://prismlibrary.com/"

//资源
//<i:Interaction.Triggers> 
//   <prism:InteractionRequestTrigger SourceObject="{Binding $Notification$Request}">
//      <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True" >
//          <prism:PopupWindowAction.WindowContent>
//              <!-- 用户控件 -->
//              <UserControl />
//         </prism:PopupWindowAction.WindowContent>
//      </prism:PopupWindowAction>
//   </prism:InteractionRequestTrigger>
//</i:Interaction.Triggers>     

//按钮调用
//<Button Margin="5" Content="按钮" Command="{Binding $Notification$RequestCommand}" />


//交互请求定义  ---  后台代码 -- 阅读后请删除该注释

/// <summary>
/// 获取或设置 $打开窗口$ 交互请求
/// </summary>
public InteractionRequest<INotification> $Notification$Request { get; set; }

/// <summary>
/// $打开窗口$ 交互请求回调方法
/// </summary>
/// <param name="obj">回调数据</param>
private void $Notification$RequestCallback(INotification obj)
{
    //TODO 回调方法填充
}

/// <summary>
/// $打开窗口$ 交互请求命令 封装命令字段
/// </summary>
private ICommand _$notification$RequestCommand;
/// <summary>
/// $打开窗口$ 交互请求命令 
/// </summary>
public ICommand $Notification$RequestCommand
{
    get
    {
        if (_$notification$RequestCommand == null) _$notification$RequestCommand = new DelegateCommand($Notification$RequestExecute);
        return _$notification$RequestCommand;
    }
    set { _$notification$RequestCommand = value; }
}

/// <summary>
/// $打开窗口$ 交互请求 命令执行方法
/// </summary>
public void $Notification$RequestExecute()
{
    Notification data = new Notification { Content = "通知消息", Title = "消息通知标题" };
    $Notification$Request.Raise(data, $Notification$RequestCallback);
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>